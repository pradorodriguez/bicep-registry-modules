{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "17758277519124835902"
    }
  },
  "definitions": {
    "_4.AiFoundryDefinitionType": {
      "type": "object",
      "properties": {
        "aiFoundryProjectDescription": {
          "type": "string"
        },
        "aiModelDeployments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "raiPolicyName": {
                "type": "string"
              },
              "versionUpgradeOption": {
                "type": "string"
              },
              "model": {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              },
              "scale": {
                "type": "object",
                "properties": {
                  "capacity": {
                    "type": "int"
                  },
                  "family": {
                    "type": "string"
                  },
                  "size": {
                    "type": "string"
                  },
                  "tier": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "createAiAgentService": {
          "type": "bool"
        },
        "createProjectConnections": {
          "type": "bool"
        },
        "lock": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "aiFoundryResources": {
          "type": "object",
          "properties": {
            "createDependentResources": {
              "type": "bool"
            },
            "aiSearch": {
              "type": "object",
              "properties": {
                "existingResourceId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "cosmosDb": {
              "type": "object",
              "properties": {
                "existingResourceId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "storageAccount": {
              "type": "object",
              "properties": {
                "existingResourceId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "keyVault": {
              "type": "object",
              "properties": {
                "existingResourceId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure AI Foundry project and related resources.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.ApimDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "publisherEmail": {
          "type": "string"
        },
        "publisherName": {
          "type": "string"
        },
        "additionalLocations": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string"
              },
              "capacity": {
                "type": "int"
              },
              "zones": {
                "type": "array",
                "items": {
                  "type": "int"
                }
              },
              "publicIpAddressId": {
                "type": "string"
              },
              "gatewayDisabled": {
                "type": "bool"
              },
              "virtualNetworkConfiguration": {
                "type": "object",
                "properties": {
                  "subnetId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "certificate": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "encodedCertificate": {
                "type": "string"
              },
              "storeName": {
                "type": "string"
              },
              "certificatePassword": {
                "type": "string"
              }
            }
          }
        },
        "clientCertificateEnabled": {
          "type": "bool"
        },
        "hostnameConfiguration": {
          "type": "object",
          "properties": {
            "management": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "type": "string"
                  },
                  "keyVaultId": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "certificatePassword": {
                    "type": "string"
                  },
                  "negotiateClientCertificate": {
                    "type": "bool"
                  },
                  "sslKeyvaultIdentityClientId": {
                    "type": "string"
                  },
                  "defaultSslBinding": {
                    "type": "bool"
                  }
                }
              }
            },
            "portal": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "type": "string"
                  },
                  "keyVaultId": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "certificatePassword": {
                    "type": "string"
                  },
                  "negotiateClientCertificate": {
                    "type": "bool"
                  },
                  "sslKeyvaultIdentityClientId": {
                    "type": "string"
                  },
                  "defaultSslBinding": {
                    "type": "bool"
                  }
                }
              }
            },
            "developerPortal": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "type": "string"
                  },
                  "keyVaultId": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "certificatePassword": {
                    "type": "string"
                  },
                  "negotiateClientCertificate": {
                    "type": "bool"
                  },
                  "sslKeyvaultIdentityClientId": {
                    "type": "string"
                  },
                  "defaultSslBinding": {
                    "type": "bool"
                  }
                }
              }
            },
            "proxy": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "type": "string"
                  },
                  "keyVaultId": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "certificatePassword": {
                    "type": "string"
                  },
                  "negotiateClientCertificate": {
                    "type": "bool"
                  },
                  "sslKeyvaultIdentityClientId": {
                    "type": "string"
                  },
                  "defaultSslBinding": {
                    "type": "bool"
                  }
                }
              }
            },
            "scm": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "hostName": {
                    "type": "string"
                  },
                  "keyVaultId": {
                    "type": "string"
                  },
                  "certificate": {
                    "type": "string"
                  },
                  "certificatePassword": {
                    "type": "string"
                  },
                  "negotiateClientCertificate": {
                    "type": "bool"
                  },
                  "sslKeyvaultIdentityClientId": {
                    "type": "string"
                  },
                  "defaultSslBinding": {
                    "type": "bool"
                  }
                }
              }
            }
          }
        },
        "minApiVersion": {
          "type": "string"
        },
        "notificationSenderEmail": {
          "type": "string"
        },
        "protocols": {
          "type": "object",
          "properties": {
            "enableHttp2": {
              "type": "bool"
            }
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        },
        "signIn": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "bool"
            }
          }
        },
        "signUp": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "bool"
            },
            "termsOfService": {
              "type": "object",
              "properties": {
                "consentRequired": {
                  "type": "bool"
                },
                "enabled": {
                  "type": "bool"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          }
        },
        "skuRoot": {
          "type": "string"
        },
        "skuCapacity": {
          "type": "int"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "tenantAccess": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "bool"
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure API Management service to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.AppConfigurationDefinitionType": {
      "type": "object",
      "properties": {
        "dataPlaneProxy": {
          "type": "object",
          "properties": {
            "authenticationMode": {
              "type": "string"
            },
            "privateLinkDelegation": {
              "type": "string"
            }
          }
        },
        "name": {
          "type": "string"
        },
        "localAuthEnabled": {
          "type": "bool"
        },
        "purgeProtectionEnabled": {
          "type": "bool"
        },
        "sku": {
          "type": "string"
        },
        "softDeleteRetentionInDays": {
          "type": "int"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure App Configuration store for GenAI app.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.AppGatewayDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "http2Enable": {
          "type": "bool"
        },
        "authenticationCertificate": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "data": {
                "type": "string"
              }
            }
          }
        },
        "sku": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "tier": {
              "type": "string"
            },
            "capacity": {
              "type": "int"
            }
          }
        },
        "autoscaleConfiguration": {
          "type": "object",
          "properties": {
            "maxCapacity": {
              "type": "int"
            },
            "minCapacity": {
              "type": "int"
            }
          }
        },
        "backendAddressPools": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "fqdns": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ipAddresses": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "backendHttpSettings": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "cookieBasedAffinity": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "port": {
                "type": "int"
              },
              "protocol": {
                "type": "string"
              },
              "affinityCookieName": {
                "type": "string"
              },
              "hostName": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "pickHostNameFromBackendAddress": {
                "type": "bool"
              },
              "probeName": {
                "type": "string"
              },
              "requestTimeout": {
                "type": "int"
              },
              "trustedRootCertificateNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "authenticationCertificate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "connectionDraining": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "bool"
                  },
                  "drainTimeoutSec": {
                    "type": "int"
                  }
                }
              }
            }
          }
        },
        "frontendPorts": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "port": {
                "type": "int"
              }
            }
          }
        },
        "httpListeners": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "frontendPortName": {
                "type": "string"
              },
              "frontendIpConfigurationName": {
                "type": "string"
              },
              "firewallPolicyId": {
                "type": "string"
              },
              "requireSni": {
                "type": "bool"
              },
              "hostName": {
                "type": "string"
              },
              "hostNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sslCertificateName": {
                "type": "string"
              },
              "sslProfileName": {
                "type": "string"
              },
              "customErrorConfiguration": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "probeConfigurations": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "interval": {
                "type": "int"
              },
              "timeout": {
                "type": "int"
              },
              "unhealthyThreshold": {
                "type": "int"
              },
              "protocol": {
                "type": "string"
              },
              "port": {
                "type": "int"
              },
              "path": {
                "type": "string"
              },
              "pickHostNameFromBackendHttpSettings": {
                "type": "bool"
              },
              "minimumServers": {
                "type": "int"
              },
              "match": {
                "type": "object"
              }
            }
          }
        },
        "redirectConfiguration": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "includePath": {
                "type": "bool"
              },
              "includeQueryString": {
                "type": "bool"
              },
              "name": {
                "type": "string"
              },
              "redirectType": {
                "type": "string"
              },
              "targetListenerName": {
                "type": "string"
              },
              "targetUrl": {
                "type": "string"
              }
            }
          }
        },
        "requestRoutingRules": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "ruleType": {
                "type": "string"
              },
              "httpListenerName": {
                "type": "string"
              },
              "backendAddressPoolName": {
                "type": "string"
              },
              "priority": {
                "type": "int"
              },
              "urlPathMapName": {
                "type": "string"
              },
              "backendHttpSettingsName": {
                "type": "string"
              },
              "redirectConfigurationName": {
                "type": "string"
              },
              "rewriteRuleSetName": {
                "type": "string"
              }
            }
          }
        },
        "rewriteRuleSet": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "rewriteRules": {
                "type": "object",
                "properties": {},
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          }
        },
        "sslCertificates": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "data": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "keyVaultSecretId": {
                "type": "string"
              }
            }
          }
        },
        "sslPolicy": {
          "type": "object",
          "properties": {
            "cipherSuites": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "disabledProtocols": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "minProtocolVersion": {
              "type": "string"
            },
            "policyName": {
              "type": "string"
            },
            "policyType": {
              "type": "string"
            }
          }
        },
        "sslProfile": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "trustedClientCertificateNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "verifyClientCertIssuerDn": {
                "type": "bool"
              },
              "verifyClientCertificateRevocation": {
                "type": "string"
              },
              "sslPolicy": {
                "type": "object",
                "properties": {
                  "cipherSuites": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "disabledProtocols": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "minProtocolVersion": {
                    "type": "string"
                  },
                  "policyName": {
                    "type": "string"
                  },
                  "policyType": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "trustedClientCertificate": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "trustedRootCertificate": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string"
              },
              "keyVaultSecretId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "urlPathMapConfigurations": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "defaultRedirectConfigurationName": {
                "type": "string"
              },
              "defaultRewriteRuleSetName": {
                "type": "string"
              },
              "defaultBackendHttpSettingsName": {
                "type": "string"
              },
              "defaultBackendAddressPoolName": {
                "type": "string"
              },
              "pathRules": {
                "type": "object",
                "properties": {},
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "paths": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "backendAddressPoolName": {
                      "type": "string"
                    },
                    "backendHttpSettingsName": {
                      "type": "string"
                    },
                    "redirectConfigurationName": {
                      "type": "string"
                    },
                    "rewriteRuleSetName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Application Gateway to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.AppInsightsDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "applicationType": {
          "type": "string",
          "allowedValues": [
            "other",
            "web"
          ]
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "other",
            "web"
          ]
        },
        "disableIpMasking": {
          "type": "bool",
          "nullable": true
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          },
          "nullable": true
        }
      },
      "metadata": {
        "description": "Configuration object for the Application Insights component to be created or reused.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.BastionDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Bastion service to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.ContainerAppDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "service_name": {
          "type": "string"
        },
        "profile_name": {
          "type": "string"
        },
        "min_replicas": {
          "type": "int"
        },
        "max_replicas": {
          "type": "int"
        }
      },
      "metadata": {
        "description": "Definition of a single Container App to create.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.ContainerAppEnvDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "internalLoadBalancerEnabled": {
          "type": "bool"
        },
        "logAnalyticsWorkspaceResourceId": {
          "type": "string"
        },
        "subnetName": {
          "type": "string",
          "nullable": true
        },
        "zoneRedundancyEnabled": {
          "type": "bool"
        },
        "userAssignedManagedIdentityIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workloadProfile": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "workloadProfileType": {
                "type": "string"
              }
            }
          }
        },
        "appLogsConfiguration": {
          "type": "object",
          "properties": {
            "destination": {
              "type": "string"
            },
            "logAnalytics": {
              "type": "object",
              "properties": {
                "customerId": {
                  "type": "string"
                },
                "sharedKey": {
                  "type": "string"
                }
              }
            }
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Container App Environment to be created for GenAI services.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.ContainerRegistryDefinitionType": {
      "type": "object",
      "properties": {
        "dataPlaneProxy": {
          "type": "object",
          "properties": {
            "authenticationMode": {
              "type": "string"
            },
            "privateLinkDelegation": {
              "type": "string"
            }
          }
        },
        "name": {
          "type": "string"
        },
        "localAuthEnabled": {
          "type": "bool"
        },
        "purgeProtectionEnabled": {
          "type": "bool"
        },
        "sku": {
          "type": "string"
        },
        "softDeleteRetentionInDays": {
          "type": "int"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Container Registry to be created for GenAI services.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.DatabaseContainerDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "Definition of a single Cosmos DB container to create.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.FirewallDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "tier": {
          "type": "string"
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Firewall to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.GenAIAppCosmosDbDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "secondaryRegions": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string"
              },
              "zoneRedundant": {
                "type": "bool"
              },
              "failoverPriority": {
                "type": "int"
              }
            }
          }
        },
        "publicNetworkAccessEnabled": {
          "type": "bool"
        },
        "analyticalStorageEnabled": {
          "type": "bool"
        },
        "automaticFailoverEnabled": {
          "type": "bool"
        },
        "localAuthenticationDisabled": {
          "type": "bool"
        },
        "partitionMergeEnabled": {
          "type": "bool"
        },
        "multipleWriteLocationsEnabled": {
          "type": "bool"
        },
        "analyticalStorageConfig": {
          "type": "object",
          "properties": {
            "schemaType": {
              "type": "string"
            }
          }
        },
        "consistencyPolicy": {
          "type": "object",
          "properties": {
            "maxIntervalInSeconds": {
              "type": "int"
            },
            "maxStalenessPrefix": {
              "type": "int"
            },
            "consistencyLevel": {
              "type": "string"
            }
          }
        },
        "backup": {
          "type": "object",
          "properties": {
            "retentionInHours": {
              "type": "int"
            },
            "intervalInMinutes": {
              "type": "int"
            },
            "storageRedundancy": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "tier": {
              "type": "string"
            }
          }
        },
        "capabilities": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        },
        "capacity": {
          "type": "object",
          "properties": {
            "totalThroughputLimit": {
              "type": "int"
            }
          }
        },
        "corsRule": {
          "type": "object",
          "properties": {
            "allowedHeaders": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "allowedOrigins": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "exposedHeaders": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "maxAgeInSeconds": {
              "type": "int"
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Cosmos DB account to be created for GenAI services.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.GenAIAppKeyVaultDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Key Vault to be created for GenAI services.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.GenAIAppStorageAccountDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "accountKind": {
          "type": "string"
        },
        "accountTier": {
          "type": "string"
        },
        "accountReplicationType": {
          "type": "string"
        },
        "endpointTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessTier": {
          "type": "string"
        },
        "publicNetworkAccessEnabled": {
          "type": "bool"
        },
        "sharedAccessKeyEnabled": {
          "type": "bool"
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure Storage Account to be created for GenAI services.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.HuVnetPeeringDefinitionType": {
      "type": "object",
      "properties": {
        "peerVnetResourceId": {
          "type": "string"
        },
        "firewallIpAddress": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "allowForwardedTraffic": {
          "type": "bool"
        },
        "allowGatewayTransit": {
          "type": "bool"
        },
        "allowVirtualNetworkAccess": {
          "type": "bool"
        },
        "createReversePeering": {
          "type": "bool"
        },
        "reverseAllowForwardedTraffic": {
          "type": "bool"
        },
        "reverseAllowGatewayTransit": {
          "type": "bool"
        },
        "reverseAllowVirtualNetworkAccess": {
          "type": "bool"
        },
        "reverseName": {
          "type": "string"
        },
        "reverseUseRemoteGateways": {
          "type": "bool"
        },
        "useRemoteGateways": {
          "type": "bool"
        }
      },
      "metadata": {
        "description": "Configuration object for VNet peering with a hub network.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.JumpVmDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "vmKeyVaultSecName": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableTelemetry": {
          "type": "bool"
        }
      },
      "metadata": {
        "description": "Configuration object for the Jump VM to be created for managing the implementation services.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.KSAISearchDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "localAuthenticationEnabled": {
          "type": "bool"
        },
        "partitionCount": {
          "type": "int"
        },
        "publicNetworkAccessEnabled": {
          "type": "bool"
        },
        "replicaCount": {
          "type": "int"
        },
        "semanticSearchSku": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        },
        "roleAssignments": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "roleDefinitionIdOrName": {
                "type": "string"
              },
              "principalId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "skipServicePrincipalAadCheck": {
                "type": "bool"
              },
              "condition": {
                "type": "string"
              },
              "conditionVersion": {
                "type": "string"
              },
              "delegatedManagedIdentityResourceId": {
                "type": "string"
              },
              "principalType": {
                "type": "string"
              }
            }
          }
        },
        "enableTelemetry": {
          "type": "bool"
        }
      },
      "metadata": {
        "description": "Configuration object for the Azure AI Search service to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.KSGroundingWithBingDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Bing Grounding service to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.LogAnalyticsWorkspaceDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "retention": {
          "type": "int"
        },
        "sku": {
          "type": "string",
          "allowedValues": [
            "CapacityReservation",
            "Free",
            "LACluster",
            "PerGB2018",
            "PerNode",
            "Premium",
            "Standalone",
            "Standard"
          ]
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          },
          "nullable": true
        }
      },
      "metadata": {
        "description": "Configuration object for the Log Analytics Workspace to be created for monitoring and logging.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.NSGDefinitionsType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "securityRules": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "access": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "destinationAddressPrefix": {
                "type": "string"
              },
              "destinationAddressPrefixes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "destinationApplicationSecurityGroupIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "destinationPortRange": {
                "type": "string"
              },
              "destinationPortRanges": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "direction": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "priority": {
                "type": "int"
              },
              "protocol": {
                "type": "string"
              },
              "sourceAddressPrefix": {
                "type": "string"
              },
              "sourceAddressPrefixes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sourceApplicationSecurityGroupIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sourcePortRange": {
                "type": "string"
              },
              "sourcePortRanges": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "timeouts": {
                "type": "object",
                "properties": {
                  "create": {
                    "type": "string"
                  },
                  "delete": {
                    "type": "string"
                  },
                  "read": {
                    "type": "string"
                  },
                  "update": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for Network Security Groups (NSGs) to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.PrivateDNSZoneDefinitionsType": {
      "type": "object",
      "properties": {
        "existingZonesSubscriptionId": {
          "type": "string"
        },
        "existingZonesResourceGroupName": {
          "type": "string"
        },
        "networkLinks": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "object",
            "properties": {
              "vnetLinkName": {
                "type": "string"
              },
              "vnetId": {
                "type": "string"
              },
              "autoRegistration": {
                "type": "bool"
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Configuration object for Private DNS Zones and their network links.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.ResourceIdsType": {
      "type": "object",
      "properties": {
        "virtualNetworkResourceId": {
          "type": "string"
        },
        "bastionHostResourceId": {
          "type": "string"
        },
        "appInsightsResourceId": {
          "type": "string"
        },
        "logAnalyticsWorkspaceResourceId": {
          "type": "string"
        },
        "appConfigResourceId": {
          "type": "string"
        },
        "keyVaultResourceId": {
          "type": "string"
        },
        "storageAccountResourceId": {
          "type": "string"
        },
        "dbAccountResourceId": {
          "type": "string"
        },
        "searchServiceResourceId": {
          "type": "string"
        },
        "groundingServiceResourceId": {
          "type": "string"
        },
        "aiFoundryAccountResourceId": {
          "type": "string"
        },
        "aiFoundrySearchServiceResourceId": {
          "type": "string"
        },
        "aiFoundryCosmosDbResourceId": {
          "type": "string"
        },
        "aiFoundryProjectResourceId": {
          "type": "string"
        },
        "containerEnvResourceId": {
          "type": "string"
        },
        "containerRegistryResourceId": {
          "type": "string"
        },
        "apimServiceResourceId": {
          "type": "string"
        },
        "applicationGatewayResourceId": {
          "type": "string"
        },
        "firewallResourceId": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "Optional existing resource IDs to reuse; leave empty to create new resources.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.ResourceNamesType": {
      "type": "object",
      "properties": {
        "vnetName": {
          "type": "string"
        },
        "bastionHostName": {
          "type": "string"
        },
        "appInsightsName": {
          "type": "string"
        },
        "logAnalyticsWorkspaceName": {
          "type": "string"
        },
        "appConfigName": {
          "type": "string"
        },
        "containerEnvName": {
          "type": "string"
        },
        "containerRegistryName": {
          "type": "string"
        },
        "storageAccountName": {
          "type": "string"
        },
        "dbAccountName": {
          "type": "string"
        },
        "dbDatabaseName": {
          "type": "string"
        },
        "searchServiceName": {
          "type": "string"
        },
        "keyVaultName": {
          "type": "string"
        },
        "aiFoundryAccountName": {
          "type": "string"
        },
        "aiFoundrySearchServiceName": {
          "type": "string"
        },
        "aiFoundryCosmosDbName": {
          "type": "string"
        },
        "aiFoundryProjectName": {
          "type": "string"
        },
        "apimName": {
          "type": "string"
        },
        "appGatewayName": {
          "type": "string"
        },
        "firewallName": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "Container for all generated resource name values.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.StorageContainerDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "Definition of a single Storage Account container to create.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.VNetDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "addressSpace": {
          "type": "string"
        },
        "ddosProtectionPlanResourceId": {
          "type": "string"
        },
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subnets": {
          "type": "array",
          "prefixItems": [
            {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool"
                },
                "name": {
                  "type": "string"
                },
                "addressPrefix": {
                  "type": "string"
                },
                "delegation": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          ],
          "items": false
        },
        "peerVnetResourceId": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "Configuration object for the Virtual Network to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.WafPolicyDefinitionsType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "policySettings": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "bool"
            },
            "mode": {
              "type": "string"
            },
            "requestBodyCheck": {
              "type": "bool"
            },
            "maxRequestBodySizeKb": {
              "type": "int"
            },
            "fileUploadLimitMb": {
              "type": "int"
            }
          }
        },
        "managedRules": {
          "type": "object",
          "properties": {
            "exclusion": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "matchVariable": {
                    "type": "string"
                  },
                  "selector": {
                    "type": "string"
                  },
                  "selectorMatchOperator": {
                    "type": "string"
                  },
                  "excludedRuleSet": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "version": {
                        "type": "string"
                      },
                      "ruleGroup": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "managedRuleSet": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "ruleGroupOverride": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "ruleGroupName": {
                          "type": "string"
                        },
                        "rule": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string"
                              },
                              "enabled": {
                                "type": "bool"
                              },
                              "id": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": {
          "type": "object",
          "properties": {},
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "metadata": {
        "description": "Configuration object for the Web Application Firewall (WAF) Policy to be deployed.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    },
    "_4.WorkloadProfileType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        },
        "memory": {
          "type": "string"
        }
      },
      "metadata": {
        "description": "Definition of a single Container Apps environment workload profile.",
        "__bicep_imported_from!": {
          "sourceTemplate": "common/types.bicep"
        }
      }
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for AI Foundry resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags applied to all deployed resources."
      }
    },
    "resourceToken": {
      "type": "string",
      "defaultValue": "[toLower(uniqueString(subscription().id, resourceGroup().name, parameters('location')))]",
      "metadata": {
        "description": "Deterministic token for resource names."
      }
    },
    "resourceNames": {
      "$ref": "#/definitions/_4.ResourceNamesType",
      "metadata": {
        "description": "Container for all generated resource name values."
      }
    },
    "useUAI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use User‑Assigned Managed Identities instead of System‑Assigned."
      }
    },
    "networkIsolation": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable network isolation (private endpoints, no public access)."
      }
    },
    "resourceIds": {
      "$ref": "#/definitions/_4.ResourceIdsType",
      "metadata": {
        "description": "Optional existing resource IDs to reuse, leave empty to create new resources."
      }
    },
    "vnetDefinition": {
      "$ref": "#/definitions/_4.VNetDefinitionType",
      "metadata": {
        "description": "Virtual Network configuration."
      }
    },
    "workloadProfiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/_4.WorkloadProfileType"
      },
      "metadata": {
        "description": "List of workload profiles to create."
      }
    },
    "logAnalyticsDefinition": {
      "$ref": "#/definitions/_4.LogAnalyticsWorkspaceDefinitionType",
      "metadata": {
        "description": "Log Analytics Workspace configuration."
      }
    },
    "appInsightsDefinition": {
      "$ref": "#/definitions/_4.AppInsightsDefinitionType",
      "metadata": {
        "description": "Application Insights configuration."
      }
    },
    "containerEnvDefinition": {
      "$ref": "#/definitions/_4.ContainerAppEnvDefinitionType",
      "metadata": {
        "description": "Container App Environment configuration."
      }
    },
    "containerApps": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/_4.ContainerAppDefinitionType"
      },
      "metadata": {
        "description": "List of container apps to create."
      }
    },
    "databaseContainers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/_4.DatabaseContainerDefinitionType"
      },
      "metadata": {
        "description": "List of Cosmos DB containers to create."
      }
    },
    "storageAccountContainers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/_4.StorageContainerDefinitionType"
      },
      "metadata": {
        "description": "List of storage account containers to create."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for the VM user."
      }
    },
    "vmSettings": {
      "$ref": "#/definitions/_4.JumpVmDefinitionType",
      "metadata": {
        "description": "Jump VM configuration."
      }
    },
    "appGatewayDefinition": {
      "$ref": "#/definitions/_4.AppGatewayDefinitionType",
      "metadata": {
        "description": "Application Gateway configuration."
      }
    },
    "aiFoundryDefinition": {
      "$ref": "#/definitions/_4.AiFoundryDefinitionType",
      "metadata": {
        "description": "AI Foundry project configuration."
      }
    },
    "apimDefinition": {
      "$ref": "#/definitions/_4.ApimDefinitionType",
      "metadata": {
        "description": "API Management configuration."
      }
    },
    "bastionDefinition": {
      "$ref": "#/definitions/_4.BastionDefinitionType",
      "metadata": {
        "description": "Bastion configuration."
      }
    },
    "firewallDefinition": {
      "$ref": "#/definitions/_4.FirewallDefinitionType",
      "metadata": {
        "description": "Firewall configuration."
      }
    },
    "appConfigurationDefinition": {
      "$ref": "#/definitions/_4.AppConfigurationDefinitionType",
      "metadata": {
        "description": "App Configuration store configuration."
      }
    },
    "containerRegistryDefinition": {
      "$ref": "#/definitions/_4.ContainerRegistryDefinitionType",
      "metadata": {
        "description": "Container Registry configuration."
      }
    },
    "cosmosDbDefinition": {
      "$ref": "#/definitions/_4.GenAIAppCosmosDbDefinitionType",
      "metadata": {
        "description": "Cosmos DB account configuration."
      }
    },
    "keyVaultDefinition": {
      "$ref": "#/definitions/_4.GenAIAppKeyVaultDefinitionType",
      "metadata": {
        "description": "Key Vault configuration."
      }
    },
    "storageAccountDefinition": {
      "$ref": "#/definitions/_4.GenAIAppStorageAccountDefinitionType",
      "metadata": {
        "description": "Storage Account configuration."
      }
    },
    "hvnetPeeringDefinition": {
      "$ref": "#/definitions/_4.HuVnetPeeringDefinitionType",
      "metadata": {
        "description": "Hub VNet peering configuration."
      }
    },
    "searchDefinition": {
      "$ref": "#/definitions/_4.KSAISearchDefinitionType",
      "metadata": {
        "description": "AI Search service configuration."
      }
    },
    "groundingDefinition": {
      "$ref": "#/definitions/_4.KSGroundingWithBingDefinitionType",
      "metadata": {
        "description": "Bing Grounding service configuration."
      }
    },
    "nsgDefinitions": {
      "$ref": "#/definitions/_4.NSGDefinitionsType",
      "metadata": {
        "description": "Network Security Groups configuration."
      }
    },
    "privateDnsDefinitions": {
      "$ref": "#/definitions/_4.PrivateDNSZoneDefinitionsType",
      "metadata": {
        "description": "Private DNS Zones configuration."
      }
    },
    "wafPolicyDefinitions": {
      "$ref": "#/definitions/_4.WafPolicyDefinitionsType",
      "metadata": {
        "description": "WAF Policy configuration."
      }
    }
  },
  "variables": {
    "_containerDummyImageName": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
    "_vnetIdSegments": "[split(parameters('resourceIds').virtualNetworkResourceId, '/')]",
    "_existingVNetSubscriptionId": "[variables('_vnetIdSegments')[2]]",
    "_existingVNetResourceGroupName": "[variables('_vnetIdSegments')[4]]",
    "_existingVNetName": "[last(variables('_vnetIdSegments'))]",
    "_lawIdSegments": "[split(parameters('resourceIds').logAnalyticsWorkspaceResourceId, '/')]",
    "_existingLawSubscriptionId": "[variables('_lawIdSegments')[2]]",
    "_existingLawResourceGroupName": "[variables('_lawIdSegments')[4]]",
    "_existingLawName": "[last(variables('_lawIdSegments'))]",
    "_aiIdSegments": "[split(parameters('resourceIds').appInsightsResourceId, '/')]",
    "_existingAISubscriptionId": "[variables('_aiIdSegments')[2]]",
    "_existingAIResourceGroupName": "[variables('_aiIdSegments')[4]]",
    "_existingAIName": "[last(variables('_aiIdSegments'))]",
    "_envIdSegments": "[split(parameters('resourceIds').containerEnvResourceId, '/')]",
    "_existingEnvSubscriptionId": "[variables('_envIdSegments')[2]]",
    "_existingEnvResourceGroup": "[variables('_envIdSegments')[4]]",
    "_existingEnvName": "[last(variables('_envIdSegments'))]",
    "_1._2": {
      "ai": {
        "aiFoundry": "aif-",
        "aiFoundryProject": "aifp-",
        "aiSearch": "srch-",
        "bing": "bing-"
      },
      "configuration": {
        "appConfiguration": "appcs-"
      },
      "compute": {
        "appServiceEnvironment": "ase-",
        "appServicePlan": "asp-",
        "loadTesting": "lt-",
        "availabilitySet": "avail-",
        "arcEnabledServer": "arcs-",
        "arcEnabledKubernetesCluster": "arck",
        "batchAccounts": "ba-",
        "cloudService": "cld-",
        "communicationServices": "acs-",
        "diskEncryptionSet": "des",
        "functionApp": "func-",
        "gallery": "gal",
        "hostingEnvironment": "host-",
        "imageTemplate": "it-",
        "managedDiskOS": "osdisk",
        "managedDiskData": "disk",
        "notificationHubs": "ntf-",
        "notificationHubsNamespace": "ntfns-",
        "proximityPlacementGroup": "ppg-",
        "restorePointCollection": "rpc-",
        "snapshot": "snap-",
        "staticWebApp": "stapp-",
        "virtualMachine": "vm-",
        "virtualMachineScaleSet": "vmss-",
        "virtualMachineMaintenanceConfiguration": "mc-",
        "virtualMachineStorageAccount": "stvm",
        "webApp": "app-"
      },
      "containers": {
        "aksCluster": "aks-",
        "aksSystemNodePool": "npsystem-",
        "aksUserNodePool": "np-",
        "containerApp": "ca-",
        "containerAppsEnvironment": "cae-",
        "containerRegistry": "cr"
      },
      "databases": {
        "cosmosDBDatabase": "cosmos-"
      },
      "managementGovernance": {
        "applicationInsights": "appi-",
        "logAnalyticsWorkspace": "log-"
      },
      "networking": {
        "virtualNetwork": "vnet-",
        "privateEndpoint": "pep-",
        "publicIPAddress": "pip-"
      },
      "security": {
        "bastion": "bas-",
        "keyVault": "kv-",
        "managedIdentity": "uai-"
      },
      "storage": {
        "storageAccount": "st"
      }
    },
    "_1._3": {
      "AcrPull": {
        "guid": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
        "key": "AcrPull"
      },
      "AcrPush": {
        "guid": "8311e382-0749-4cb8-b61a-304f252e45ec",
        "key": "AcrPush"
      },
      "AppConfigurationDataOwner": {
        "guid": "5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
        "key": "AppConfigurationDataOwner"
      },
      "AppConfigurationDataReader": {
        "guid": "516239f1-63e1-4d78-a4de-a74fb236a071",
        "key": "AppConfigurationDataReader"
      },
      "AzureAIProjectManager": {
        "guid": "eadc314b-1a2d-4efa-be10-5d325db5065e",
        "key": "AzureAIProjectManager"
      },
      "CognitiveServicesOpenAIUser": {
        "guid": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
        "key": "CognitiveServicesOpenAIUser"
      },
      "CognitiveServicesUser": {
        "guid": "a97b65f3-24c7-4388-baec-2e87135dc908",
        "key": "CognitiveServicesUser"
      },
      "CosmosDBBuiltInDataContributor": {
        "guid": "00000000-0000-0000-0000-000000000002",
        "key": "CosmosDBBuiltInDataContributor"
      },
      "KeyVaultContributor": {
        "guid": "f25e0fa2-a7c8-4377-a976-54943a77a395",
        "key": "KeyVaultContributor"
      },
      "KeyVaultSecretsOfficer": {
        "guid": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
        "key": "KeyVaultSecretsOfficer"
      },
      "KeyVaultSecretsUser": {
        "guid": "4633458b-17de-408a-b874-0445c86b69e6",
        "key": "KeyVaultSecretsUser"
      },
      "SearchIndexDataContributor": {
        "guid": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
        "key": "SearchIndexDataContributor"
      },
      "SearchIndexDataReader": {
        "guid": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
        "key": "SearchIndexDataReader"
      },
      "SearchServiceContributor": {
        "guid": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
        "key": "SearchServiceContributor"
      },
      "StorageBlobDataContributor": {
        "guid": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
        "key": "StorageBlobDataContributor"
      },
      "StorageBlobDataReader": {
        "guid": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
        "key": "StorageBlobDataReader"
      }
    },
    "_1.abbrs": "[variables('_1._2')]",
    "_1.roles": "[variables('_1._3')]"
  },
  "resources": {
    "existingVNet": {
      "existing": true,
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2024-07-01",
      "subscriptionId": "[variables('_existingVNetSubscriptionId')]",
      "resourceGroup": "[variables('_existingVNetResourceGroupName')]",
      "name": "[variables('_existingVNetName')]"
    },
    "existingLogAnalytics": {
      "condition": "[not(empty(parameters('resourceIds').logAnalyticsWorkspaceResourceId))]",
      "existing": true,
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2025-02-01",
      "subscriptionId": "[variables('_existingLawSubscriptionId')]",
      "resourceGroup": "[variables('_existingLawResourceGroupName')]",
      "name": "[variables('_existingLawName')]"
    },
    "existingAppInsights": {
      "condition": "[not(empty(parameters('resourceIds').appInsightsResourceId))]",
      "existing": true,
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "subscriptionId": "[variables('_existingAISubscriptionId')]",
      "resourceGroup": "[variables('_existingAIResourceGroupName')]",
      "name": "[variables('_existingAIName')]"
    },
    "existingContainerEnv": {
      "condition": "[not(empty(parameters('resourceIds').containerEnvResourceId))]",
      "existing": true,
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2025-02-02-preview",
      "subscriptionId": "[variables('_existingEnvSubscriptionId')]",
      "resourceGroup": "[variables('_existingEnvResourceGroup')]",
      "name": "[variables('_existingEnvName')]"
    },
    "virtualNetwork": {
      "condition": "[empty(parameters('resourceIds').virtualNetworkResourceId)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "virtualNetworkDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('vnetDefinition').name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "addressPrefixes": {
            "value": [
              "[parameters('vnetDefinition').addressSpace]"
            ]
          },
          "ddosProtectionPlanResourceId": {
            "value": "[parameters('vnetDefinition').ddosProtectionPlanResourceId]"
          },
          "dnsServers": {
            "value": "[parameters('vnetDefinition').dnsServers]"
          },
          "subnets": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('vnetDefinition').subnets)]",
                "input": "[createObject('name', parameters('vnetDefinition').subnets[copyIndex('value')].name, 'addressPrefix', parameters('vnetDefinition').subnets[copyIndex('value')].addressPrefix)]"
              }
            ]
          },
          "peerings": "[if(empty(parameters('vnetDefinition').peerVnetResourceId), createObject('value', createArray()), createObject('value', createArray(createObject('name', format('{0}-to-peer', parameters('vnetDefinition').name), 'remoteVirtualNetworkResourceId', parameters('vnetDefinition').peerVnetResourceId))))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "16195883788906927531"
            },
            "name": "Virtual Networks",
            "description": "This module deploys a Virtual Network (vNet)."
          },
          "definitions": {
            "peeringType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                  }
                },
                "remoteVirtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                  }
                },
                "allowForwardedTraffic": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                  }
                },
                "allowGatewayTransit": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                  }
                },
                "allowVirtualNetworkAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                  }
                },
                "doNotVerifyRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                  }
                },
                "useRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                  }
                },
                "remotePeeringEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Deploy the outbound and the inbound peering."
                  }
                },
                "remotePeeringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                  }
                },
                "remotePeeringAllowForwardedTraffic": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                  }
                },
                "remotePeeringAllowGatewayTransit": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                  }
                },
                "remotePeeringAllowVirtualNetworkAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                  }
                },
                "remotePeeringDoNotVerifyRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                  }
                },
                "remotePeeringUseRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                  }
                }
              }
            },
            "subnetType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Name of the subnet resource."
                  }
                },
                "addressPrefix": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                  }
                },
                "addressPrefixes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                  }
                },
                "ipamPoolPrefixAllocations": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "object",
                      "properties": {
                        "pool": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the IPAM pool."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The Resource ID of the IPAM pool."
                          }
                        },
                        "numberOfIpAddresses": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Number of IP addresses allocated from the pool."
                          }
                        }
                      }
                    }
                  ],
                  "items": false,
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty and the VNet address space configured to use IPAM Pool."
                  }
                },
                "applicationGatewayIPConfigurations": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application gateway IP configurations of virtual network resource."
                  }
                },
                "delegation": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The delegation to enable on the subnet."
                  }
                },
                "natGatewayResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                  }
                },
                "networkSecurityGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the network security group to assign to the subnet."
                  }
                },
                "privateEndpointNetworkPolicies": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled",
                    "NetworkSecurityGroupEnabled",
                    "RouteTableEnabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                  }
                },
                "privateLinkServiceNetworkPolicies": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "routeTableResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the route table to assign to the subnet."
                  }
                },
                "serviceEndpointPolicies": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. An array of service endpoint policies."
                  }
                },
                "serviceEndpoints": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The service endpoints to enable on the subnet."
                  }
                },
                "defaultOutboundAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                  }
                },
                "sharingScope": {
                  "type": "string",
                  "allowedValues": [
                    "DelegatedServices",
                    "Tenant"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                  }
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network (vNet)."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "addressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes OR the resource ID of the IPAM pool to be used for the Virtual Network. When specifying an IPAM pool resource ID you must also set a value for the parameter called `ipamPoolNumberOfIpAddresses`."
              }
            },
            "ipamPoolNumberOfIpAddresses": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Number of IP addresses allocated from the pool. To be used only when the addressPrefix param is defined with a resource ID of an IPAM pool."
              }
            },
            "virtualNetworkBgpCommunity": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The BGP community associated with the virtual network."
              }
            },
            "subnets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subnetType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. An Array of subnets to deploy to the Virtual Network."
              }
            },
            "dnsServers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
              }
            },
            "ddosProtectionPlanResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
              }
            },
            "peerings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/peeringType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual Network Peering configurations."
              }
            },
            "vnetEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
              }
            },
            "vnetEncryptionEnforcement": {
              "type": "string",
              "defaultValue": "AllowUnencrypted",
              "allowedValues": [
                "AllowUnencrypted",
                "DropUnencrypted"
              ],
              "metadata": {
                "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
              }
            },
            "flowTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 0,
              "maxValue": 30,
              "metadata": {
                "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "enableVmProtection": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "virtualNetwork": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": "[if(contains(parameters('addressPrefixes')[0], '/Microsoft.Network/networkManagers/'), createObject('ipamPoolPrefixAllocations', createArray(createObject('pool', createObject('id', parameters('addressPrefixes')[0]), 'numberOfIpAddresses', parameters('ipamPoolNumberOfIpAddresses')))), createObject('addressPrefixes', parameters('addressPrefixes')))]",
                "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                "enableVmProtection": "[parameters('enableVmProtection')]"
              }
            },
            "virtualNetwork_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_diagnosticSettings": {
              "copy": {
                "name": "virtualNetwork_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_roleAssignments": {
              "copy": {
                "name": "virtualNetwork_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_subnets": {
              "copy": {
                "name": "virtualNetwork_subnets",
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualNetworkName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                  },
                  "addressPrefix": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                  },
                  "addressPrefixes": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                  },
                  "ipamPoolPrefixAllocations": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'ipamPoolPrefixAllocations')]"
                  },
                  "applicationGatewayIPConfigurations": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                  },
                  "delegation": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                  },
                  "natGatewayResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                  },
                  "networkSecurityGroupResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                  },
                  "privateEndpointNetworkPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                  },
                  "privateLinkServiceNetworkPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "routeTableResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                  },
                  "serviceEndpointPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                  },
                  "serviceEndpoints": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                  },
                  "defaultOutboundAccess": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                  },
                  "sharingScope": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9728353654559466189"
                    },
                    "name": "Virtual Network Subnets",
                    "description": "This module deploys a Virtual Network Subnet."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of the subnet resource."
                      }
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                      }
                    },
                    "ipamPoolPrefixAllocations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty."
                      }
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                      }
                    },
                    "routeTableResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                      }
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The service endpoints to enable on the subnet."
                      }
                    },
                    "delegation": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The delegation to enable on the subnet."
                      }
                    },
                    "natGatewayResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                      }
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        "NetworkSecurityGroupEnabled",
                        "RouteTableEnabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                      }
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                      }
                    },
                    "defaultOutboundAccess": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                      }
                    },
                    "sharingScope": {
                      "type": "string",
                      "allowedValues": [
                        "DelegatedServices",
                        "Tenant"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set this property to Tenant to allow sharing the subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if the subnet is empty."
                      }
                    },
                    "applicationGatewayIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                      }
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of service endpoint policies."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetworksubnet.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('virtualNetworkName')]"
                    },
                    "subnet": {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "serviceEndpoints",
                            "count": "[length(parameters('serviceEndpoints'))]",
                            "input": {
                              "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                            }
                          }
                        ],
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "addressPrefixes": "[parameters('addressPrefixes')]",
                        "ipamPoolPrefixAllocations": "[parameters('ipamPoolPrefixAllocations')]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                        "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                        "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                        "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                        "sharingScope": "[parameters('sharingScope')]"
                      }
                    },
                    "subnet_roleAssignments": {
                      "copy": {
                        "name": "subnet_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "subnet"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "The address prefix for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "List of address prefixes for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                    },
                    "ipamPoolPrefixAllocations": {
                      "type": "array",
                      "metadata": {
                        "description": "The IPAM pool prefix allocations for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'ipamPoolPrefixAllocations'), createArray())]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_peering_local": {
              "copy": {
                "name": "virtualNetwork_peering_local",
                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[parameters('name')]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                  },
                  "allowForwardedTraffic": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                  },
                  "allowGatewayTransit": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                  },
                  "doNotVerifyRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                  },
                  "useRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11179987886456111827"
                    },
                    "name": "Virtual Network Peerings",
                    "description": "This module deploys a Virtual Network Peering."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork",
                "virtualNetwork_subnets"
              ]
            },
            "virtualNetwork_peering_remote": {
              "copy": {
                "name": "virtualNetwork_peering_remote",
                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
              },
              "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
              "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                  },
                  "allowForwardedTraffic": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                  },
                  "allowGatewayTransit": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                  },
                  "doNotVerifyRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                  },
                  "useRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11179987886456111827"
                    },
                    "name": "Virtual Network Peerings",
                    "description": "This module deploys a Virtual Network Peering."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork",
                "virtualNetwork_subnets"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the virtual network was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the virtual network."
              },
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual network."
              },
              "value": "[parameters('name')]"
            },
            "subnetNames": {
              "type": "array",
              "metadata": {
                "description": "The names of the deployed subnets."
              },
              "copy": {
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
              }
            },
            "subnetResourceIds": {
              "type": "array",
              "metadata": {
                "description": "The resource IDs of the deployed subnets."
              },
              "copy": {
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('virtualNetwork', '2024-05-01', 'full').location]"
            }
          }
        }
      }
    },
    "logAnalytics": {
      "condition": "[empty(parameters('resourceIds').logAnalyticsWorkspaceResourceId)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployLogAnalytics",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('logAnalyticsDefinition').name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "skuName": {
            "value": "[parameters('logAnalyticsDefinition').sku]"
          },
          "dataRetention": {
            "value": "[parameters('logAnalyticsDefinition').retention]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "managedIdentities": {
            "value": {
              "systemAssigned": true
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1749032521457140145"
            },
            "name": "Log Analytics Workspaces",
            "description": "This module deploys a Log Analytics Workspace."
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "useThisWorkspace": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              }
            },
            "gallerySolutionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                  }
                },
                "plan": {
                  "$ref": "#/definitions/solutionPlanType",
                  "metadata": {
                    "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the gallery solutions to be created in the log analytics workspace."
              }
            },
            "storageInsightsConfigType": {
              "type": "object",
              "properties": {
                "storageAccountResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the storage account to be linked."
                  }
                },
                "containers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The names of the blob containers that the workspace should read."
                  }
                },
                "tables": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of tables to be read by the workspace."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the storage insights configuration."
              }
            },
            "linkedServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the linked service."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                  }
                },
                "writeAccessResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the linked service."
              }
            },
            "linkedStorageAccountType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the link."
                  }
                },
                "storageAccountIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minLength": 1,
                  "metadata": {
                    "description": "Required. Linked storage accounts resources Ids."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the linked storage account."
              }
            },
            "savedSearchType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the saved search."
                  }
                },
                "etag": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                  }
                },
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The category of the saved search. This helps the user to find a saved search faster."
                  }
                },
                "displayName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Display name for the search."
                  }
                },
                "functionAlias": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The function alias if query serves as a function."
                  }
                },
                "functionParameters": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                  }
                },
                "query": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The query expression for the saved search."
                  }
                },
                "tags": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tags attached to the saved search."
                  }
                },
                "version": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version number of the query language. The current version is 2 and is the default."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the saved search."
              }
            },
            "dataExportType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the data export."
                  }
                },
                "destination": {
                  "$ref": "#/definitions/destinationType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination of the data export."
                  }
                },
                "enable": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the data export."
                  }
                },
                "tableNames": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. The list of table names to export."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the data export."
              }
            },
            "dataSourceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the data source."
                  }
                },
                "kind": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The kind of data source."
                  }
                },
                "linkedResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace."
                  }
                },
                "eventLogName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the event log to configure when kind is WindowsEvent."
                  }
                },
                "eventTypes": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The event types to configure when kind is WindowsEvent."
                  }
                },
                "objectName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "instanceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "intervalSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "performanceCounters": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                  }
                },
                "counterName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                  }
                },
                "state": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                  }
                },
                "syslogName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. System log to configure when kind is LinuxSyslog."
                  }
                },
                "syslogSeverities": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Severities to configure when kind is LinuxSyslog."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                    },
                    "description": "Optional. Tags to configure in the resource."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the data source."
              }
            },
            "tableType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the table."
                  }
                },
                "plan": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The plan for the table."
                  }
                },
                "restoredLogs": {
                  "$ref": "#/definitions/restoredLogsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The restored logs for the table."
                  }
                },
                "schema": {
                  "$ref": "#/definitions/schemaType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The schema for the table."
                  }
                },
                "searchResults": {
                  "$ref": "#/definitions/searchResultsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The search results for the table."
                  }
                },
                "retentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The retention in days for the table."
                  }
                },
                "totalRetentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The total retention in days for the table."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The role assignments for the table."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the custom table."
              }
            },
            "workspaceFeaturesType": {
              "type": "object",
              "properties": {
                "disableLocalAuth": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Disable Non-EntraID based Auth. Default is true."
                  }
                },
                "enableDataExport": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag that indicate if data should be exported."
                  }
                },
                "enableLogAccessUsingOnlyResourcePermissions": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable log access using only resource permissions. Default is false."
                  }
                },
                "immediatePurgeDataOn30Days": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag that describes if we want to remove the data after 30 days."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Features of the workspace."
              }
            },
            "workspaceReplicationType": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies whether the replication is enabled or not. When true, workspace configuration and data is replicated to the specified location."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The location to which the workspace is replicated. Required if replication is enabled."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Replication properties of the workspace."
              }
            },
            "_1.columnType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The column name."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "boolean",
                    "dateTime",
                    "dynamic",
                    "guid",
                    "int",
                    "long",
                    "real",
                    "string"
                  ],
                  "metadata": {
                    "description": "Required. The column type."
                  }
                },
                "dataTypeHint": {
                  "type": "string",
                  "allowedValues": [
                    "armPath",
                    "guid",
                    "ip",
                    "uri"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The column data type logical hint."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The column description."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Column display name."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the table column.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "destinationType": {
              "type": "object",
              "properties": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The destination resource ID."
                  }
                },
                "metaData": {
                  "type": "object",
                  "properties": {
                    "eventHubName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination metadata."
                  }
                }
              },
              "metadata": {
                "description": "The data export destination properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "data-export/main.bicep"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "restoredLogsType": {
              "type": "object",
              "properties": {
                "sourceTable": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table to restore data from."
                  }
                },
                "startRestoreTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to start the restore from (UTC)."
                  }
                },
                "endRestoreTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to end the restore by (UTC)."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the restore operation that initiated the table.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "schemaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The table name."
                  }
                },
                "columns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.columnType"
                  },
                  "metadata": {
                    "description": "Required. A list of table custom columns."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table description."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table display name."
                  }
                }
              },
              "metadata": {
                "description": "The table schema.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "searchResultsType": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The search job query."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The search description."
                  }
                },
                "limit": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Limit the search job to return up to specified number of rows."
                  }
                },
                "startSearchTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to start the search from (UTC)."
                  }
                },
                "endSearchTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to end the search by (UTC)."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the search job that initiated the table.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "solutionPlanType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                  }
                },
                "product": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                  }
                },
                "publisher": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/operations-management/solution:0.3.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "CapacityReservation",
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The name of the SKU."
              }
            },
            "skuCapacityReservationLevel": {
              "type": "int",
              "defaultValue": 100,
              "minValue": 100,
              "maxValue": 5000,
              "metadata": {
                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
              }
            },
            "storageInsightsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/storageInsightsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of storage accounts to be read by the workspace."
              }
            },
            "linkedServices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/linkedServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of services to be linked."
              }
            },
            "linkedStorageAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/linkedStorageAccountType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
              }
            },
            "savedSearches": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/savedSearchType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Kusto Query Language searches to save."
              }
            },
            "dataExports": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataExportType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW data export instances to be deployed."
              }
            },
            "dataSources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataSourceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW data sources to configure."
              }
            },
            "tables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tableType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW custom tables to be deployed."
              }
            },
            "gallerySolutions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gallerySolutionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
              }
            },
            "onboardWorkspaceToSentinel": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Onboard the Log Analytics Workspace to Sentinel. Requires 'SecurityInsights' solution to be in gallerySolutions."
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 365,
              "minValue": 0,
              "maxValue": 730,
              "metadata": {
                "description": "Optional. Number of days data will be retained for."
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            },
            "features": {
              "$ref": "#/definitions/workspaceFeaturesType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The workspace features."
              }
            },
            "replication": {
              "$ref": "#/definitions/workspaceReplicationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The workspace replication properties."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "forceCmkForQuery": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.OperationalInsights/workspaces@2025-02-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.12.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "logAnalyticsWorkspace": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2025-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": 1,
                  "enableLogAccessUsingOnlyResourcePermissions": "[coalesce(tryGet(parameters('features'), 'enableLogAccessUsingOnlyResourcePermissions'), false())]",
                  "disableLocalAuth": "[coalesce(tryGet(parameters('features'), 'disableLocalAuth'), true())]",
                  "enableDataExport": "[tryGet(parameters('features'), 'enableDataExport')]",
                  "immediatePurgeDataOn30Days": "[tryGet(parameters('features'), 'immediatePurgeDataOn30Days')]"
                },
                "sku": {
                  "name": "[parameters('skuName')]",
                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "forceCmkForQuery": "[parameters('forceCmkForQuery')]",
                "replication": "[parameters('replication')]"
              },
              "identity": "[variables('identity')]"
            },
            "logAnalyticsWorkspace_diagnosticSettings": {
              "copy": {
                "name": "logAnalyticsWorkspace_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_sentinelOnboarding": {
              "condition": "[and(not(empty(filter(coalesce(parameters('gallerySolutions'), createArray()), lambda('item', startsWith(lambdaVariables('item').name, 'SecurityInsights'))))), parameters('onboardWorkspaceToSentinel'))]",
              "type": "Microsoft.SecurityInsights/onboardingStates",
              "apiVersion": "2024-03-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "default",
              "properties": {},
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_roleAssignments": {
              "copy": {
                "name": "logAnalyticsWorkspace_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_storageInsightConfigs": {
              "copy": {
                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                "count": "[length(coalesce(parameters('storageInsightsConfigs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": {
                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'containers')]"
                  },
                  "tables": {
                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'tables')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()].storageAccountResourceId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "1306323182548882150"
                    },
                    "name": "Log Analytics Workspace Storage Insight Configs",
                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the storage insights config."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The names of the blob containers that the workspace should read."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The names of the Azure tables that the workspace should read."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "storageinsightconfig": {
                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "containers": "[parameters('containers')]",
                        "tables": "[parameters('tables')]",
                        "storageAccount": {
                          "id": "[parameters('storageAccountResourceId')]",
                          "key": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage insights configuration."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the storage insight configuration is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage insights configuration."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedServices": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedServices",
                "count": "[length(coalesce(parameters('linkedServices'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('linkedServices'), createArray())[copyIndex()].name]"
                  },
                  "resourceId": {
                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'resourceId')]"
                  },
                  "writeAccessResourceId": {
                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'writeAccessResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "5230241501765697269"
                    },
                    "name": "Log Analytics Workspace Linked Services",
                    "description": "This module deploys a Log Analytics Workspace Linked Service."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                      }
                    },
                    "writeAccessResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/linkedServices@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedService": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resourceId": "[parameters('resourceId')]",
                        "writeAccessResourceId": "[parameters('writeAccessResourceId')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked service."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked service is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedStorageAccounts": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                "count": "[length(coalesce(parameters('linkedStorageAccounts'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].name]"
                  },
                  "storageAccountIds": {
                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].storageAccountIds]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10372135754202496594"
                    },
                    "name": "Log Analytics Workspace Linked Storage Accounts",
                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "Query",
                        "Alerts",
                        "CustomLogs",
                        "AzureWatson"
                      ],
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "storageAccountIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Linked storage accounts resources Ids."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedStorageAccount": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "storageAccountIds": "[parameters('storageAccountIds')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked storage account."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked storage account is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_savedSearches": {
              "copy": {
                "name": "logAnalyticsWorkspace_savedSearches",
                "count": "[length(coalesce(parameters('savedSearches'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[format('{0}{1}', coalesce(parameters('savedSearches'), createArray())[copyIndex()].name, uniqueString(deployment().name))]"
                  },
                  "etag": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'etag')]"
                  },
                  "displayName": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].displayName]"
                  },
                  "category": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].category]"
                  },
                  "query": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].query]"
                  },
                  "functionAlias": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionAlias')]"
                  },
                  "functionParameters": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionParameters')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'tags')]"
                  },
                  "version": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'version')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9015459905306126128"
                    },
                    "name": "Log Analytics Workspace Saved Searches",
                    "description": "This module deploys a Log Analytics Workspace Saved Search."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the saved search."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name for the search."
                      }
                    },
                    "category": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Query category."
                      }
                    },
                    "query": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Kusto Query to be stored."
                      }
                    },
                    "tags": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/savedSearches@2025-02-01#properties/properties/properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    },
                    "functionAlias": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The function alias if query serves as a function."
                      }
                    },
                    "functionParameters": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                      }
                    },
                    "version": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The version number of the query language."
                      }
                    },
                    "etag": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "savedSearch": {
                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "etag": "[parameters('etag')]",
                        "tags": "[coalesce(parameters('tags'), createArray())]",
                        "displayName": "[parameters('displayName')]",
                        "category": "[parameters('category')]",
                        "query": "[parameters('query')]",
                        "functionAlias": "[parameters('functionAlias')]",
                        "functionParameters": "[parameters('functionParameters')]",
                        "version": "[parameters('version')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed saved search."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the saved search is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed saved search."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace",
                "logAnalyticsWorkspace_linkedStorageAccounts"
              ]
            },
            "logAnalyticsWorkspace_dataExports": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataExports",
                "count": "[length(coalesce(parameters('dataExports'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('dataExports'), createArray())[copyIndex()].name]"
                  },
                  "destination": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'destination')]"
                  },
                  "enable": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'enable')]"
                  },
                  "tableNames": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'tableNames')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8586520532175356447"
                    },
                    "name": "Log Analytics Workspace Data Exports",
                    "description": "This module deploys a Log Analytics Workspace Data Export."
                  },
                  "definitions": {
                    "destinationType": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The destination resource ID."
                          }
                        },
                        "metaData": {
                          "type": "object",
                          "properties": {
                            "eventHubName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The destination metadata."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The data export destination properties."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The data export rule name."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "destination": {
                      "$ref": "#/definitions/destinationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Destination properties."
                      }
                    },
                    "enable": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Active when enabled."
                      }
                    },
                    "tableNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "dataExport": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "destination": "[parameters('destination')]",
                        "enable": "[parameters('enable')]",
                        "tableNames": "[parameters('tableNames')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the data export."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the data export."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the data export was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_dataSources": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataSources",
                "count": "[length(coalesce(parameters('dataSources'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].name]"
                  },
                  "kind": {
                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].kind]"
                  },
                  "linkedResourceId": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'linkedResourceId')]"
                  },
                  "eventLogName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventLogName')]"
                  },
                  "eventTypes": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventTypes')]"
                  },
                  "objectName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'objectName')]"
                  },
                  "instanceName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'instanceName')]"
                  },
                  "intervalSeconds": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'intervalSeconds')]"
                  },
                  "counterName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'counterName')]"
                  },
                  "state": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'state')]"
                  },
                  "syslogName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogName')]"
                  },
                  "syslogSeverities": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogSeverities')]"
                  },
                  "performanceCounters": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'performanceCounters')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8336916453932906250"
                    },
                    "name": "Log Analytics Workspace Datasources",
                    "description": "This module deploys a Log Analytics Workspace Data Source."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the data source."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzureActivityLog",
                      "allowedValues": [
                        "AzureActivityLog",
                        "WindowsEvent",
                        "WindowsPerformanceCounter",
                        "IISLogs",
                        "LinuxSyslog",
                        "LinuxSyslogCollection",
                        "LinuxPerformanceObject",
                        "LinuxPerformanceCollection"
                      ],
                      "metadata": {
                        "description": "Optional. The kind of the data source."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    },
                    "linkedResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the resource to be linked."
                      }
                    },
                    "eventLogName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                      }
                    },
                    "eventTypes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                      }
                    },
                    "objectName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "instanceName": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "intervalSeconds": {
                      "type": "int",
                      "defaultValue": 60,
                      "metadata": {
                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "performanceCounters": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                      }
                    },
                    "counterName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                      }
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                      }
                    },
                    "syslogName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                      }
                    },
                    "syslogSeverities": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "dataSource": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed data source."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the data source is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed data source."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_tables": {
              "copy": {
                "name": "logAnalyticsWorkspace_tables",
                "count": "[length(coalesce(parameters('tables'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                  },
                  "plan": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'plan')]"
                  },
                  "schema": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'schema')]"
                  },
                  "retentionInDays": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'retentionInDays')]"
                  },
                  "totalRetentionInDays": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'totalRetentionInDays')]"
                  },
                  "restoredLogs": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'restoredLogs')]"
                  },
                  "searchResults": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'searchResults')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "315390662258960765"
                    },
                    "name": "Log Analytics Workspace Tables",
                    "description": "This module deploys a Log Analytics Workspace Table."
                  },
                  "definitions": {
                    "restoredLogsType": {
                      "type": "object",
                      "properties": {
                        "sourceTable": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table to restore data from."
                          }
                        },
                        "startRestoreTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to start the restore from (UTC)."
                          }
                        },
                        "endRestoreTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to end the restore by (UTC)."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the restore operation that initiated the table."
                      }
                    },
                    "schemaType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The table name."
                          }
                        },
                        "columns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/columnType"
                          },
                          "metadata": {
                            "description": "Required. A list of table custom columns."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table description."
                          }
                        },
                        "displayName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table display name."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The table schema."
                      }
                    },
                    "columnType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The column name."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "boolean",
                            "dateTime",
                            "dynamic",
                            "guid",
                            "int",
                            "long",
                            "real",
                            "string"
                          ],
                          "metadata": {
                            "description": "Required. The column type."
                          }
                        },
                        "dataTypeHint": {
                          "type": "string",
                          "allowedValues": [
                            "armPath",
                            "guid",
                            "ip",
                            "uri"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The column data type logical hint."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The column description."
                          }
                        },
                        "displayName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Column display name."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the table column."
                      }
                    },
                    "searchResultsType": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The search job query."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The search description."
                          }
                        },
                        "limit": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Limit the search job to return up to specified number of rows."
                          }
                        },
                        "startSearchTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to start the search from (UTC)."
                          }
                        },
                        "endSearchTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to end the search by (UTC)."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the search job that initiated the table."
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the table."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "plan": {
                      "type": "string",
                      "defaultValue": "Analytics",
                      "allowedValues": [
                        "Basic",
                        "Analytics"
                      ],
                      "metadata": {
                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                      }
                    },
                    "restoredLogs": {
                      "$ref": "#/definitions/restoredLogsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Restore parameters."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/schemaType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Table's schema."
                      }
                    },
                    "searchResults": {
                      "$ref": "#/definitions/searchResultsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Parameters of the search job that initiated this table."
                      }
                    },
                    "totalRetentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 2555,
                      "metadata": {
                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "table": {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "plan": "[parameters('plan')]",
                        "restoredLogs": "[parameters('restoredLogs')]",
                        "retentionInDays": "[parameters('retentionInDays')]",
                        "schema": "[parameters('schema')]",
                        "searchResults": "[parameters('searchResults')]",
                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                      }
                    },
                    "table_roleAssignments": {
                      "copy": {
                        "name": "table_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "table"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the table."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the table was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_solutions": {
              "copy": {
                "name": "logAnalyticsWorkspace_solutions",
                "count": "[length(coalesce(parameters('gallerySolutions'), createArray()))]"
              },
              "condition": "[not(empty(parameters('gallerySolutions')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "plan": {
                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].plan]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "10255889523646649592"
                    },
                    "name": "Operations Management Solutions",
                    "description": "This module deploys an Operations Management Solution.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "solutionPlanType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                          }
                        },
                        "product": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                      }
                    },
                    "plan": {
                      "$ref": "#/definitions/solutionPlanType",
                      "metadata": {
                        "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "solution": {
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      },
                      "plan": {
                        "name": "[coalesce(tryGet(parameters('plan'), 'name'), parameters('name'))]",
                        "promotionCode": "",
                        "product": "[parameters('plan').product]",
                        "publisher": "[coalesce(tryGet(parameters('plan'), 'publisher'), 'Microsoft')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed solution."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed solution."
                      },
                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the solution is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('solution', '2015-11-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace."
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed log analytics workspace."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed log analytics workspace."
              },
              "value": "[parameters('name')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID associated with the workspace."
              },
              "value": "[reference('logAnalyticsWorkspace').customerId]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('logAnalyticsWorkspace', '2025-02-01', 'full').location]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('logAnalyticsWorkspace', '2025-02-01', 'full'), 'identity'), 'principalId')]"
            },
            "primarySharedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The primary shared key of the log analytics workspace."
              },
              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').primarySharedKey]"
            },
            "secondarySharedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary shared key of the log analytics workspace."
              },
              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').secondarySharedKey]"
            }
          }
        }
      }
    },
    "appInsights": {
      "condition": "[empty(parameters('resourceIds').appInsightsResourceId)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployAppInsights",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('appInsightsDefinition').name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceResourceId": "[if(empty(parameters('resourceIds').logAnalyticsWorkspaceResourceId), createObject('value', reference('logAnalytics').outputs.resourceId.value), createObject('value', parameters('resourceIds').logAnalyticsWorkspaceResourceId))]",
          "applicationType": {
            "value": "[coalesce(parameters('appInsightsDefinition').applicationType, 'web')]"
          },
          "kind": {
            "value": "[coalesce(parameters('appInsightsDefinition').kind, 'web')]"
          },
          "disableIpMasking": {
            "value": "[coalesce(parameters('appInsightsDefinition').disableIpMasking, false())]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "5735496719243704506"
            },
            "name": "Application Insights",
            "description": "This component deploys an Application Insights instance."
          },
          "definitions": {
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Application Insights."
              }
            },
            "applicationType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ],
              "metadata": {
                "description": "Optional. Application type."
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
              }
            },
            "disableIpMasking": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Disable IP masking. Default value is set to true."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
              }
            },
            "forceCustomerStorageForProfiler": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Force users to create their own storage account for profiler and debugger."
              }
            },
            "linkedStorageAccountResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Linked storage account resource ID."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "allowedValues": [
                30,
                60,
                90,
                120,
                180,
                270,
                365,
                550,
                730
              ],
              "metadata": {
                "description": "Optional. Retention period in days."
              }
            },
            "samplingPercentage": {
              "type": "int",
              "defaultValue": 100,
              "minValue": 0,
              "maxValue": 100,
              "metadata": {
                "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
              }
            },
            "flowType": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API."
              }
            },
            "requestSource": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
              "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "appInsights": {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "Application_Type": "[parameters('applicationType')]",
                "DisableIpMasking": "[parameters('disableIpMasking')]",
                "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "RetentionInDays": "[parameters('retentionInDays')]",
                "SamplingPercentage": "[parameters('samplingPercentage')]",
                "Flow_Type": "[parameters('flowType')]",
                "Request_Source": "[parameters('requestSource')]"
              }
            },
            "appInsights_roleAssignments": {
              "copy": {
                "name": "appInsights_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "appInsights"
              ]
            },
            "appInsights_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "appInsights"
              ]
            },
            "appInsights_diagnosticSettings": {
              "copy": {
                "name": "appInsights_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "appInsights"
              ]
            },
            "linkedStorageAccount": {
              "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appInsightsName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[coalesce(parameters('linkedStorageAccountResourceId'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10861379689695100897"
                    },
                    "name": "Application Insights Linked Storage Account",
                    "description": "This component deploys an Application Insights Linked Storage Account."
                  },
                  "parameters": {
                    "appInsightsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Linked storage account resource ID."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/components/linkedStorageAccounts",
                      "apiVersion": "2020-03-01-preview",
                      "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                      "properties": {
                        "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Linked Storage Account."
                      },
                      "value": "ServiceProfiler"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Linked Storage Account."
                      },
                      "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the agent pool was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "appInsights"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the application insights component."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the application insights component."
              },
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the application insights component was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "applicationId": {
              "type": "string",
              "metadata": {
                "description": "The application ID of the application insights component."
              },
              "value": "[reference('appInsights').AppId]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('appInsights', '2020-02-02', 'full').location]"
            },
            "instrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
              },
              "value": "[reference('appInsights').InstrumentationKey]"
            },
            "connectionString": {
              "type": "string",
              "metadata": {
                "description": "Application Insights Connection String."
              },
              "value": "[reference('appInsights').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "logAnalytics"
      ]
    },
    "containerEnv": {
      "condition": "[empty(parameters('resourceIds').containerEnvResourceId)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployContainerEnv",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('containerEnvDefinition').name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "appInsightsConnectionString": "[if(not(empty(parameters('resourceIds').containerEnvResourceId)), createObject('value', reference('existingAppInsights').ConnectionString), createObject('value', reference('appInsights').outputs.connectionString.value))]",
          "zoneRedundant": {
            "value": "[parameters('containerEnvDefinition').zoneRedundancyEnabled]"
          },
          "workloadProfiles": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('containerEnvDefinition').workloadProfile)]",
                "input": "[createObject('name', parameters('containerEnvDefinition').workloadProfile[copyIndex('value')].name, 'workloadProfileType', parameters('containerEnvDefinition').workloadProfile[copyIndex('value')].workloadProfileType)]"
              }
            ]
          },
          "managedIdentities": {
            "value": {
              "systemAssigned": "[if(not(empty(parameters('containerEnvDefinition').userAssignedManagedIdentityIds)), false(), true())]",
              "userAssignedResourceIds": "[parameters('containerEnvDefinition').userAssignedManagedIdentityIds]"
            }
          },
          "infrastructureSubnetResourceId": "[if(parameters('containerEnvDefinition').internalLoadBalancerEnabled, if(empty(parameters('resourceIds').virtualNetworkResourceId), createObject('value', reference('virtualNetwork').outputs.subnetResourceIds.value[indexOf(reference('virtualNetwork').outputs.subnetNames.value, parameters('containerEnvDefinition').subnetName)]), createObject('value', format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('_existingVNetSubscriptionId'), variables('_existingVNetResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('_existingVNetName')), parameters('containerEnvDefinition').subnetName))), createObject('value', ''))]",
          "internal": {
            "value": "[parameters('containerEnvDefinition').internalLoadBalancerEnabled]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "10777649424390064640"
            },
            "name": "App ManagedEnvironments",
            "description": "This module deploys an App Managed Environment (also known as a Container App Environment)."
          },
          "definitions": {
            "certificateType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the certificate."
                  }
                },
                "certificateType": {
                  "type": "string",
                  "allowedValues": [
                    "ImagePullTrustedCA",
                    "ServerSSLCertificate"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The type of the certificate."
                  }
                },
                "certificateValue": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The value of the certificate. PFX or PEM blob."
                  }
                },
                "certificatePassword": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The password of the certificate."
                  }
                },
                "certificateKeyVaultProperties": {
                  "$ref": "#/definitions/certificateKeyVaultPropertiesType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A key vault reference."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a certificate."
              }
            },
            "storageType": {
              "type": "object",
              "properties": {
                "accessMode": {
                  "type": "string",
                  "allowedValues": [
                    "ReadOnly",
                    "ReadWrite"
                  ],
                  "metadata": {
                    "description": "Required. Access mode for storage: \"ReadOnly\" or \"ReadWrite\"."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "NFS",
                    "SMB"
                  ],
                  "metadata": {
                    "description": "Required. Type of storage: \"SMB\" or \"NFS\"."
                  }
                },
                "storageAccountName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Storage account name."
                  }
                },
                "shareName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. File share name."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of the storage."
              }
            },
            "appLogsConfigurationType": {
              "type": "object",
              "properties": {
                "destination": {
                  "type": "string",
                  "allowedValues": [
                    "azure-monitor",
                    "log-analytics",
                    "none"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination of the logs."
                  }
                },
                "logAnalyticsConfiguration": {
                  "type": "object",
                  "properties": {
                    "customerId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Log Analytics Workspace ID."
                      }
                    },
                    "sharedKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. The shared key of the Log Analytics workspace."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The Log Analytics configuration. Required if `destination` is `log-analytics`."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the App Logs Configuration."
              }
            },
            "certificateKeyVaultPropertiesType": {
              "type": "object",
              "properties": {
                "identityResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the identity. This is the identity that will be used to access the key vault."
                  }
                },
                "keyVaultUrl": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. A key vault URL referencing the wildcard certificate that will be used for the custom domain."
                  }
                }
              },
              "metadata": {
                "description": "The type for the certificate's key vault properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "certificates/main.bicep"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Container Apps Managed Environment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "appInsightsConnectionString": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Application Insights connection string."
              }
            },
            "daprAIConnectionString": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Application Insights connection string used by Dapr to export Service to Service communication telemetry."
              }
            },
            "daprAIInstrumentationKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry."
              }
            },
            "dockerBridgeCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. CIDR notation IP range assigned to the Docker bridge, network. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "infrastructureSubnetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. Resource ID of a subnet for infrastructure components. This is used to deploy the environment into a virtual network. Must not overlap with any other provided IP ranges. Required if \"internal\" is set to true. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "internal": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditional. Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. If set to true, then \"infrastructureSubnetId\" must be provided. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "platformReservedCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true  to make the resource WAF compliant."
              }
            },
            "platformReservedDnsIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. An IP address from the IP range defined by \"platformReservedCidr\" that will be reserved for the internal DNS server. It must not be the first address in the range and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "peerTrafficEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether or not to encrypt peer traffic."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether to allow or block all public traffic."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether or not this Managed Environment is zone-redundant."
              }
            },
            "certificatePassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Password of the certificate used by the custom domain."
              }
            },
            "certificateValue": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Certificate to use for the custom domain. PFX or PEM."
              }
            },
            "dnsSuffix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. DNS suffix for the environment domain."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "openTelemetryConfiguration": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Open Telemetry configuration."
              }
            },
            "workloadProfiles": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Conditional. Workload profiles configured for the Managed Environment. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "infrastructureResourceGroupName": {
              "type": "string",
              "defaultValue": "[take(format('ME_{0}', parameters('name')), 63)]",
              "metadata": {
                "description": "Conditional. Name of the infrastructure resource group. If not provided, it will be set with a default value. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "storages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/storageType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of storages to mount on the environment."
              }
            },
            "certificate": {
              "$ref": "#/definitions/certificateType",
              "nullable": true,
              "metadata": {
                "description": "Optional. A Managed Environment Certificate."
              }
            },
            "appLogsConfiguration": {
              "$ref": "#/definitions/appLogsConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The AppLogsConfiguration for the Managed Environment."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "managedEnvironment::storage": {
              "copy": {
                "name": "managedEnvironment::storage",
                "count": "[length(coalesce(parameters('storages'), createArray()))]"
              },
              "type": "Microsoft.App/managedEnvironments/storages",
              "apiVersion": "2024-10-02-preview",
              "name": "[format('{0}/{1}', parameters('name'), coalesce(parameters('storages'), createArray())[copyIndex()].shareName)]",
              "properties": {
                "nfsAzureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'NFS'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'server', format('{0}.file.{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, environment().suffixes.storage), 'shareName', format('/{0}/{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, coalesce(parameters('storages'), createArray())[copyIndex()].shareName)), null())]",
                "azureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'SMB'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'accountName', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, 'accountKey', listkeys(resourceId('Microsoft.Storage/storageAccounts', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName), '2023-01-01').keys[0].value, 'shareName', coalesce(parameters('storages'), createArray())[copyIndex()].shareName), null())]"
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-11-01",
              "name": "[format('46d3xbcp.res.app-managedenvironment.{0}.{1}', replace('0.11.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "managedEnvironment": {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-10-02-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "appInsightsConfiguration": {
                  "connectionString": "[parameters('appInsightsConnectionString')]"
                },
                "appLogsConfiguration": "[parameters('appLogsConfiguration')]",
                "daprAIConnectionString": "[parameters('daprAIConnectionString')]",
                "daprAIInstrumentationKey": "[parameters('daprAIInstrumentationKey')]",
                "customDomainConfiguration": {
                  "certificatePassword": "[parameters('certificatePassword')]",
                  "certificateValue": "[if(not(empty(parameters('certificateValue'))), parameters('certificateValue'), null())]",
                  "dnsSuffix": "[parameters('dnsSuffix')]",
                  "certificateKeyVaultProperties": "[if(not(empty(tryGet(parameters('certificate'), 'certificateKeyVaultProperties'))), createObject('identity', tryGet(parameters('certificate'), 'certificateKeyVaultProperties', 'identityResourceId'), 'keyVaultUrl', tryGet(parameters('certificate'), 'certificateKeyVaultProperties', 'keyVaultUrl')), null())]"
                },
                "openTelemetryConfiguration": "[if(not(empty(parameters('openTelemetryConfiguration'))), parameters('openTelemetryConfiguration'), null())]",
                "peerTrafficConfiguration": {
                  "encryption": {
                    "enabled": "[parameters('peerTrafficEncryption')]"
                  }
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "vnetConfiguration": {
                  "internal": "[parameters('internal')]",
                  "infrastructureSubnetId": "[if(not(empty(parameters('infrastructureSubnetResourceId'))), parameters('infrastructureSubnetResourceId'), null())]",
                  "dockerBridgeCidr": "[if(not(empty(parameters('infrastructureSubnetResourceId'))), parameters('dockerBridgeCidr'), null())]",
                  "platformReservedCidr": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetResourceId')))), parameters('platformReservedCidr'), null())]",
                  "platformReservedDnsIP": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetResourceId')))), parameters('platformReservedDnsIP'), null())]"
                },
                "workloadProfiles": "[if(not(empty(parameters('workloadProfiles'))), parameters('workloadProfiles'), null())]",
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "infrastructureResourceGroup": "[parameters('infrastructureResourceGroupName')]"
              }
            },
            "managedEnvironment_roleAssignments": {
              "copy": {
                "name": "managedEnvironment_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/managedEnvironments', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            },
            "managedEnvironment_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            },
            "managedEnvironment_certificate": {
              "condition": "[not(empty(parameters('certificate')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Managed-Environment-Certificate', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(parameters('certificate'), 'name'), format('cert-{0}', parameters('name')))]"
                  },
                  "managedEnvironmentName": {
                    "value": "[parameters('name')]"
                  },
                  "certificateKeyVaultProperties": {
                    "value": "[tryGet(parameters('certificate'), 'certificateKeyVaultProperties')]"
                  },
                  "certificateType": {
                    "value": "[tryGet(parameters('certificate'), 'certificateType')]"
                  },
                  "certificateValue": {
                    "value": "[tryGet(parameters('certificate'), 'certificateValue')]"
                  },
                  "certificatePassword": {
                    "value": "[tryGet(parameters('certificate'), 'certificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "18123249047188753287"
                    },
                    "name": "App ManagedEnvironments Certificates",
                    "description": "This module deploys a App Managed Environment Certificate."
                  },
                  "definitions": {
                    "certificateKeyVaultPropertiesType": {
                      "type": "object",
                      "properties": {
                        "identityResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the identity. This is the identity that will be used to access the key vault."
                          }
                        },
                        "keyVaultUrl": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. A key vault URL referencing the wildcard certificate that will be used for the custom domain."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the certificate's key vault properties."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container Apps Managed Environment Certificate."
                      }
                    },
                    "managedEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent app managed environment. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "certificateKeyVaultProperties": {
                      "$ref": "#/definitions/certificateKeyVaultPropertiesType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A key vault reference to the certificate to use for the custom domain."
                      }
                    },
                    "certificateType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "ServerSSLCertificate",
                        "ImagePullTrustedCA"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the certificate."
                      }
                    },
                    "certificateValue": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The value of the certificate. PFX or PEM blob."
                      }
                    },
                    "certificatePassword": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The password of the certificate."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": {
                    "managedEnvironment": {
                      "existing": true,
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2024-10-02-preview",
                      "name": "[parameters('managedEnvironmentName')]"
                    },
                    "managedEnvironmentCertificate": {
                      "type": "Microsoft.App/managedEnvironments/certificates",
                      "apiVersion": "2024-10-02-preview",
                      "name": "[format('{0}/{1}', parameters('managedEnvironmentName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "certificateKeyVaultProperties": "[if(not(empty(parameters('certificateKeyVaultProperties'))), createObject('identity', parameters('certificateKeyVaultProperties').identityResourceId, 'keyVaultUrl', parameters('certificateKeyVaultProperties').keyVaultUrl), null())]",
                        "certificateType": "[parameters('certificateType')]",
                        "password": "[parameters('certificatePassword')]",
                        "value": "[parameters('certificateValue')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key values."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key values."
                      },
                      "value": "[resourceId('Microsoft.App/managedEnvironments/certificates', parameters('managedEnvironmentName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the batch account was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Managed Environment was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('managedEnvironment', '2024-10-02-preview', 'full').location]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Managed Environment."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Managed Environment."
              },
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('managedEnvironment', '2024-10-02-preview', 'full'), 'identity'), 'principalId')]"
            },
            "defaultDomain": {
              "type": "string",
              "metadata": {
                "description": "The Default domain of the Managed Environment."
              },
              "value": "[reference('managedEnvironment').defaultDomain]"
            },
            "staticIp": {
              "type": "string",
              "metadata": {
                "description": "The IP address of the Managed Environment."
              },
              "value": "[reference('managedEnvironment').staticIp]"
            },
            "domainVerificationId": {
              "type": "string",
              "metadata": {
                "description": "The domain verification id for custom domains."
              },
              "value": "[reference('managedEnvironment').customDomainConfiguration.customDomainVerificationId]"
            }
          }
        }
      },
      "dependsOn": [
        "appInsights",
        "existingAppInsights",
        "virtualNetwork"
      ]
    }
  },
  "outputs": {
    "TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "SUBSCRIPTION_ID": {
      "type": "string",
      "value": "[subscription().subscriptionId]"
    },
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[deployment().name]"
    },
    "RESOURCE_TOKEN": {
      "type": "string",
      "value": "[parameters('resourceToken')]"
    },
    "NETWORK_ISOLATION": {
      "type": "bool",
      "value": "[parameters('networkIsolation')]"
    },
    "virtualNetworkResourceId": {
      "type": "string",
      "value": "[if(empty(parameters('resourceIds').virtualNetworkResourceId), reference('virtualNetwork').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('_existingVNetSubscriptionId'), variables('_existingVNetResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('_existingVNetName')))]"
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "value": "[if(empty(parameters('resourceIds').logAnalyticsWorkspaceResourceId), reference('logAnalytics').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('_existingLawSubscriptionId'), variables('_existingLawResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('_existingLawName')))]"
    },
    "applicationInsightsResourceId": {
      "type": "string",
      "value": "[if(empty(parameters('resourceIds').appInsightsResourceId), reference('appInsights').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('_existingAISubscriptionId'), variables('_existingAIResourceGroupName')), 'Microsoft.Insights/components', variables('_existingAIName')))]"
    },
    "containerEnvResourceId": {
      "type": "string",
      "value": "[if(empty(parameters('resourceIds').containerEnvResourceId), reference('containerEnv').outputs.resourceId.value, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('_existingEnvSubscriptionId'), variables('_existingEnvResourceGroup')), 'Microsoft.App/managedEnvironments', variables('_existingEnvName')))]"
    }
  }
}